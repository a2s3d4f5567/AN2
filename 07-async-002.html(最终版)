<!DOCTYPE html>
<html lang="zh">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitHub 仓库提交清单</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #d0e9f4;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        h2 {
            color: #333;
            text-align: center;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #dddddd;
        }
        
        th {
            background-color: #f2f2f2;
            color: #333;
        }
        
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        
        tr:hover {
            background-color: #f5f5f5;
        }
        
        .loading {
            text-align: center;
            padding: 50px 0;
        }
        
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .error {
            text-align: center;
            padding: 50px 0;
            color: red;
        }
        
        .progress-container {
            width: 300px;
            max-width: 100%;
            height: 20px;
            background-color: #f3f3f3;
            border-radius: 10px;
            margin: 20px auto;
            overflow: hidden;
        }
        
        .progress-bar {
            width: 0%;
            height: 100%;
            background-color: #4CAF50;
            transition: width 0.3s;
        }
        
        .source {
            margin-top: 20px;
            text-align: center;
            color: #666;
            font-size: 0.9em;
        }
    </style>
</head>

<body>
    <div class="container">
        <div id="content">
            <div class="loading">
                <p>正在加载数据...</p>
                <div class="spinner"></div>
            </div>
        </div>
    </div>

    <script>
        // 显示加载状态
        function showLoading(message) {
            const content = document.getElementById('content');
            content.innerHTML = `
                <div class="loading">
                    <p>${message}</p>
                    <div class="spinner"></div>
                </div>
            `;
        }
        
        // 显示错误信息
        function showError(message) {
            const content = document.getElementById('content');
            content.innerHTML = `
                <div class="error">
                    <h3>加载失败</h3>
                    <p>${message}</p>
                    <p>请检查控制台获取更多信息</p>
                </div>
            `;
        }
        
        // 更新进度条
        function updateProgress(percent, message) {
            const progressBar = document.querySelector('.progress-bar');
            const progressText = document.querySelector('.progress-text');
            
            if (progressBar) progressBar.style.width = `${percent}%`;
            if (progressText) progressText.textContent = message || `${percent}%`;
        }

        // 获取仓库所有提交的文件信息
        async function getCommitDetails(owner, repo) {
            try {
                showLoading(`正在获取 ${owner}/${repo} 的提交信息...`);
                
                // 首先获取仓库的基本信息，检查是否存在
                const repoInfoUrl = `https://api.github.com/repos/${owner}/${repo}`;
                const repoInfoResponse = await fetch(repoInfoUrl);
                
                if (!repoInfoResponse.ok) {
                    if (repoInfoResponse.status === 404) {
                        throw new Error(`仓库 ${owner}/${repo} 不存在或无法访问`);
                    } else {
                        throw new Error(`网络响应失败 (状态码: ${repoInfoResponse.status})`);
                    }
                }
                
                const repoInfo = await repoInfoResponse.json();
                
                // 获取仓库的所有提交
                let allCommits = [];
                let page = 1;
                const perPage = 30; // 限制每页数量，避免请求过多
                
                // 创建进度指示器
                document.getElementById('content').innerHTML = `
                    <div class="loading">
                        <h3>正在获取 ${owner}/${repo} 的提交信息</h3>
                        <p>这可能需要一些时间...</p>
                        <div class="progress-container">
                            <div class="progress-bar" id="progress-bar"></div>
                        </div>
                        <p class="progress-text" id="progress-text">0%</p>
                    </div>
                `;
                
                // 预估提交页数（基于仓库的总提交数）
                const estimatedTotalCommits = repoInfo.size > 0 ? Math.min(100, repoInfo.size) : 30;
                const estimatedTotalPages = Math.ceil(estimatedTotalCommits / perPage);
                
                while (true) {
                    const commitsUrl = `https://api.github.com/repos/${owner}/${repo}/commits?page=${page}&per_page=${perPage}`;
                    console.log(`正在获取第 ${page}/${estimatedTotalPages} 页提交...`);
                    
                    const commitsResponse = await fetch(commitsUrl);
                    
                    // 检查API速率限制
                    const rateLimitRemaining = commitsResponse.headers.get('X-RateLimit-Remaining');
                    const rateLimitReset = commitsResponse.headers.get('X-RateLimit-Reset');
                    
                    console.log(`API请求剩余次数: ${rateLimitRemaining}`);
                    
                    if (!commitsResponse.ok) {
                        if (commitsResponse.status === 403 && rateLimitRemaining === '0') {
                            const resetTime = new Date(parseInt(rateLimitReset) * 1000);
                            throw new Error(`API请求速率限制已达到，将于 ${resetTime.toLocaleTimeString()} 后重置`);
                        }
                        throw new Error(`获取提交列表失败 (状态码: ${commitsResponse.status})`);
                    }
                    
                    const commits = await commitsResponse.json();
                    
                    if (commits.length === 0) {
                        break; // 没有更多提交了
                    }
                    
                    allCommits = allCommits.concat(commits);
                    page++;
                    
                    // 更新进度
                    const progressPercent = Math.min(100, Math.floor((allCommits.length / estimatedTotalCommits) * 100));
                    updateProgress(progressPercent, `获取提交: ${allCommits.length}/${estimatedTotalCommits}`);
                    
                    // 限制最多获取100个提交，避免触发API限制
                    if (allCommits.length >= 100) {
                        console.log('已获取最大数量的提交，停止加载更多');
                        break;
                    }
                    
                    // 添加延迟，避免频繁请求
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
                
                if (allCommits.length === 0) {
                    throw new Error(`仓库 ${owner}/${repo} 没有提交记录`);
                }
                
                console.log(`共获取到 ${allCommits.length} 个提交`);
                
                // 更新进度显示，准备获取提交详情
                document.getElementById('content').innerHTML = `
                    <div class="loading">
                        <h3>正在获取提交详情</h3>
                        <p>这可能需要一些时间...</p>
                        <div class="progress-container">
                            <div class="progress-bar" id="progress-bar"></div>
                        </div>
                        <p class="progress-text" id="progress-text">0/${allCommits.length}</p>
                    </div>
                `;
                
                // 处理每个提交，获取其中的文件信息
                const allFileChanges = [];
                
                // 限制处理的提交数量，防止请求过多
                const maxCommitsToProcess = Math.min(50, allCommits.length);
                const commitsToProcess = allCommits.slice(0, maxCommitsToProcess);
                
                for (let i = 0; i < commitsToProcess.length; i++) {
                    const commit = commitsToProcess[i];
                    
                    // 每处理一个提交暂停一下，避免触发API限制
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                    console.log(`正在获取提交 ${i+1}/${maxCommitsToProcess}: ${commit.sha.substring(0, 7)} 的详情...`);
                    updateProgress(Math.floor((i / maxCommitsToProcess) * 100), `${i+1}/${maxCommitsToProcess}`);
                    
                    try {
                        const commitDetailResponse = await fetch(commit.url);
                        
                        if (!commitDetailResponse.ok) {
                            console.error(`获取提交 ${commit.sha.substring(0, 7)} 详情失败: ${commitDetailResponse.statusText}`);
                            continue;
                        }
                        
                        const commitDetail = await commitDetailResponse.json();
                        
                        // 提取提交中的文件信息
                        const fileChanges = commitDetail.files.map(file => ({
                            date: commit.commit.committer.date,
                            message: commit.commit.message,
                            author: commit.commit.author.name,
                            filename: file.filename,
                            status: file.status,
                            additions: file.additions,
                            deletions: file.deletions,
                            changes: file.changes
                        }));
                        
                        allFileChanges.push(...fileChanges);
                    } catch (error) {
                        console.error(`处理提交 ${commit.sha.substring(0, 7)} 时出错:`, error);
                    }
                }
                
                if (allFileChanges.length === 0) {
                    throw new Error('未能获取到任何文件变更信息');
                }
                
                console.log('所有文件变更信息：', allFileChanges);
                return allFileChanges;
            } catch (error) {
                console.error('获取提交详情失败:', error);
                showError(error.message);
                return [];
            }
        }

        // 页面加载后立即开始加载数据
        document.addEventListener('DOMContentLoaded', function() {
            try {
                // 从URL参数获取仓库信息，默认使用示例仓库
                const urlParams = new URLSearchParams(window.location.search);
                const owner = urlParams.get('owner') || 'a2s3d4f5567';
                const repo = urlParams.get('repo') || 'AN2';
                
                getCommitDetails(owner, repo).then(data => {
                    if (data && data.length > 0) {
                        // 按日期降序排序，最新的提交在最前面
                        const sortedData = [...data].sort((a, b) => {
                            return new Date(b.date) - new Date(a.date);
                        });

                        let tableHTML = `
                            <h2>GitHub仓库 ${owner}/${repo} 作业提交清单</h2>
                            <table>
                                <thead>
                                    <tr>
                                        <th>序号</th>
                                        <th>提交时间</th>
                                        <th>文件名称</th>
                                        <th>提交者</th>
                                        <th>提交信息</th>
                                        <th>状态</th>
                                        <th>添加行数</th>
                                        <th>删除行数</th>
                                        <th>变更总数</th>
                                    </tr>
                                </thead>
                                <tbody>
                        `;

                        sortedData.forEach((item, index) => {
                            // 为不同状态的文件添加不同的颜色
                            let statusStyle = '';
                            if (item.status === 'added') statusStyle = 'color: green;';
                            else if (item.status === 'deleted') statusStyle = 'color: red;';
                            else if (item.status === 'modified') statusStyle = 'color: blue;';
                            else if (item.status === 'renamed') statusStyle = 'color: purple;';
                            
                            tableHTML += `
                                <tr>
                                    <td>${index + 1}</td>
                                    <td>${new Date(item.date).toLocaleString()}</td>
                                    <td title="${item.filename}">${item.filename}</td>
                                    <td>${item.author}</td>
                                    <td style="max-width: 300px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" title="${item.message}">${item.message}</td>
                                    <td style="${statusStyle}">${item.status}</td>
                                    <td>${item.additions}</td>
                                    <td>${item.deletions}</td>
                                    <td>${item.changes}</td>
                                </tr>
                            `;
                        });

                        tableHTML += `
                                </tbody>
                            </table>
                            <div class="source">
                                <p>数据来源: GitHub API</p>
                                <p>总计: ${sortedData.length} 条文件变更记录</p>
                                <p class="rate-limit-warning">注意: 未认证的API请求每小时限制60次，此页面可能只显示部分提交记录。</p>
                            </div>
                        `;

                        document.getElementById('content').innerHTML = tableHTML;
                    } else {
                        showError('没有找到任何提交记录');
                    }
                }).catch(error => {
                    console.error('加载数据时出错:', error);
                    showError('发生未知错误');
                });
            } catch (error) {
                console.error('初始化时出错:', error);
                showError('页面初始化失败');
            }
        });
    </script>
</body>
</html>
